name: SSH PUSH

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [14.x, 16.x, 18.x]
    #     # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: SSH Push
        uses: ErenKrt/ssh-push@1.3
        with:
          # IP Address of remote host
          host: ${{ secrets.HOST }}
          # Port of SSH Protocol
          port: ${{ secrets.PORT }}
          # Username of SSH user
          username: ${{ secrets.USER }}
          # Password of user
          password: ${{ secrets.PASSWORD }}
          # Folder/File to be transferred
          source: "./src"
          # Destination of source archive file
          destination: "~/workspace/eko-waste-table/src"
          # Execute commands after transfer source file
          scripts: echo "ok"

    
    # - uses: actions/checkout@v3
    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: ${{ matrix.node-version }}
    #     cache: 'npm'
    # - run: npm ci
    # - run: npm run build --if-present
    # - run: npm test


# - name: SSH Push
  # You may pin to the exact commit or the version.
  # uses: ErenKrt/ssh-push@cea145c9f5cc7a0a12e8151ac946e6d2fe565fd7
  # uses: ErenKrt/ssh-push@1.3
  # with:
  #   # IP Address of remote host
  #   host: home.dobrastronka.pl
  #   # Port of SSH Protocol
  #   port: 22222
  #   # Username of SSH user
  #   username: pi
  #   # Password of user
  #   password: 
  #   # Folder/File to be transferred
  #   source: src
  #   # Destination of source archive file
  #   destination: ~/workspace/eko-waste-table/src
  #   # Execute commands after transfer source file
  #   scripts: echo "ok"



          # ssh pi@home.dobrastronka.pl -p 22222

# ~/workspace/eko-waste-table
# zmiana na branchu -> wy≈õlij pliki Dockerfile, compose.yaml, package.json, package-lock.json, src/
#


# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

